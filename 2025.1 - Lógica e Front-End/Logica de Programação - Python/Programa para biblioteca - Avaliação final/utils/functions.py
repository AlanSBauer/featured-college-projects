# Imports:
from utils.library import books_library, list_users
#importando biblioteca para verificar nomes em python:
import re
# Import json para salvar dados
import json
import os # Importando para solucionar erro, caso os arquivos do json estiverem vazios

def load_data():
    try:
        if os.path.getsize("data/books.json") > 0:
            with open("data/books.json", "r", encoding="utf-8") as f:
                books = json.load(f)
        else:
            books = {"available": {}, "borrowed": {}}
    except FileNotFoundError:
        books = {"available": {}, "borrowed": {}}

    try:
        if os.path.getsize("data/users.json") > 0:
            with open("data/users.json", "r", encoding="utf-8") as f:
                users = json.load(f)
        else:
            users = {}
    except FileNotFoundError:
        users = {}

    return books, users

# Fun√ß√µes
# Salvar dados
def save_data(books_library, list_users):
    with open("data/books.json", "w", encoding="utf-8") as f:
        json.dump(books_library, f, indent=4, ensure_ascii=False)

    with open("data/users.json", "w", encoding="utf-8") as f:
        json.dump(list_users, f, indent=4, ensure_ascii=False)

# Carregar dados

def load_data():
    try:
        if os.path.getsize("data/books.json") > 0:
            with open("data/books.json", "r", encoding="utf-8") as f:
                books = json.load(f)
        else:
            books = {"available": {}, "borrowed": {}}
    except FileNotFoundError:
        books = {"available": {}, "borrowed": {}}

    try:
        if os.path.getsize("data/users.json") > 0:
            with open("data/users.json", "r", encoding="utf-8") as f:
                users = json.load(f)
        else:
            users = {}
    except FileNotFoundError:
        users = {}

    return books, users


# Verificar nome com biblioteca
def verify(name):
    name = name.strip()
    return re.fullmatch(r"[A-Za-z√Ä-√ñ√ò-√∂√∏-√ø\.]+(?: [A-Za-z√Ä-√ñ√ò-√∂√∏-√ø\.]+)*", name) is not None

# Fun√ß√£o para try / remover erros
def try_exception(function, mensagem_erro):
    try:
        function()
    except Exception as erro:
        print(f"üî¥ ERRO: {mensagem_erro}")
        
           
# Registrar livros
def register_books():
    print("Para realizar o cancelamento do registro, digite \"Cancelar\"!")
    print("=============================================")
    while True:
        title_book = str(input(("T√≠tulo do livro: "))).strip()
        if title_book.lower() == "cancelar":
            return
        elif not title_book.isalpha():
            print("üî¥ O nome do livro n√£o pode conter simbolos!")
            continue
        else: 
            break
        
    while True:
        author_book = str(input("Autor do livro: ")).strip()
        if not verify(author_book):
            print("üî¥ Nome inv√°lido! Use apenas letras e espa√ßos, sem s√≠mbolos ou n√∫meros.")    
        elif author_book.lower() == "cancelar":
            return
        elif author_book.isnumeric():
            print("üî¥ O nome do autor(a), n√£o pode ser n√∫meros!")
        else:
            break
        
    while True:
        try:
            year_book = int(input("Ano de publica√ß√£o do livro: "))
            if len(str(year_book)) != 4:
                print("üî¥ √â necessario colocar as 4 letras do ano!")
            else:
                break
        except ValueError:
            print("üî¥ O ano tem que ser digitado com n√∫meros inteiros!")
    
    new_book = {"author": author_book, "year": year_book}
    books_library["available"][title_book] = new_book

    save_data(books_library, list_users)
    print("‚úÖ Livro cadastrado com sucesso!")
 
 
# Registrar usu√°rios
def register_users():
    print("Para realizar o cancelamento do registro, digite \"Cancelar\"!")
    print("=============================================")
    
    while True:
        name_user = str(input("Informe o nome do usu√°rio: ")).strip()
        if not verify(name_user):
            print("üî¥ Nome inv√°lido! Use apenas letras e espa√ßos, sem s√≠mbolos ou n√∫meros.")  
        elif name_user.isnumeric():
            print("üî¥ O nome n√£o pode conter n√∫mero!")
        elif name_user.lower() == "cancelar":
            return
        else:
            break
        
    while True:
        cpf_user = str(input("Informe o CPF do usu√°rio (somente n√∫meros ou formatado): ")).strip()
           
        if cpf_user.lower() == "cancelar":
            return

        cpf_limpo = clean_cpf(cpf_user)

        if len(cpf_limpo) != 11:
            print("üî¥ CPF inv√°lido! Deve conter 11 d√≠gitos num√©ricos.")
            continue

        break
    
    list_users[name_user] = {"CPF": cpf_limpo}
    
    save_data(books_library, list_users)
    print("‚úÖ Usu√°rio cadatrado com sucesso!")

# Listar usu√°rios
def users_list():
    if not list_users:
        print("üî¥ Nenhum usu√°rio cadastrado!")
        return
    for user in list_users:
        cpf = list_users[user]["CPF"]
        cpf_format = format_cpf(cpf)
        print(f"Nome: {user} - CPF: {cpf_format}")
        

# Listar livros
def list_books():
    print("=============================================")
    print("1 - Livros dispon√≠veis\n2 - Livros emprestados")
    option = input("Digite a op√ß√£o: ").strip()
    
    if option == "1":
        if not books_library["available"]:
            print("üî¥ N√£o h√° livros dispon√≠veis!")
            return
        print("=============================================")
        print("LIVROS DISPON√çVEIS: ")
        for title in books_library["available"]:
            book_infos = books_library["available"][title]
            author = book_infos["author"]
            year = book_infos["year"]
            print(f"T√≠tulo: {title} | Autor: {author} - Ano: {year}")
                
    elif option == "2":
        if not books_library["borrowed"]:
            print("üî¥ N√£o h√° livros emprestados!")
            return
        print("=============================================")
        print("LIVROS EMPRESTADOS: ")
        for title in books_library["borrowed"]:
            book_infos = books_library["borrowed"][title]
            name_user = book_infos["Name"]
            cpf = book_infos["CPF"]
            
            print(f"LIVRO: {title} || Emprestado para: {name_user} - CPF: {cpf}")
    
    else:
        print("üî¥ Op√ß√£o inv√°lida.")
         
            
# Adicionar empr√©stimo
def make_loans():
    print("Para realizar o cancelamento do empr√©stimo, digite \"Cancelar\"!")
    print("=============================================")
    
    name_user = str(input("Nome do usu√°rio: ")).strip()
    
    for books in books_library["borrowed"]:
        if books_library["borrowed"][books]["Name"] == name_user:
            print("üî¥ O usu√°rio ja est√° com um livro, ao devolver pode pegar outro!")
            return
    
    if name_user.lower() == "cancelar":
        return
    
    if name_user not in list_users:
        print("üî¥ Usu√°rio n√£o encontrado!")
        print("‚ö†Ô∏è - Erro ao digitar ou cadastro inexistente!")
        return
    
    book = str(input("T√≠tulo do livro: ")).strip()
    
    if book.lower() == "cancelar":
        return
    
    # Verificar se j√° n√£o est√° com a mesma pessoa:
    if book in books_library["borrowed"]:
        if books_library["borrowed"][book]["Name"] == name_user:
            print("üî¥ O livro j√° est√° com este usu√°rio!")
            return
        else:
            print("üî¥ O Livro foi emprestado a outro usu√°rio!")
            return
    # Verificar se tem o livro dispon√≠vel na biblioteca:
    if book not in books_library["available"]:
        print("üî¥ Livro n√£o disponivel na biblioteca!")
        return
    else:
        book_author = books_library["available"][book]["author"] 
        book_year = books_library["available"][book]["year"]
        del books_library["available"][book]
        cpf = list_users[name_user]["CPF"]
        books_library["borrowed"][book] = {"Name": name_user, "CPF": cpf, "author": book_author, "year": book_year}
        
        save_data(books_library, list_users)
        print("=============================================")
        print(f"O livro {book} foi emprestado para {name_user}!")
        print("‚úÖ Empr√©stimo realizado com sucesso!")
        print("=============================================")
        
# Remover empr√©stimo
def remove_loan():
    print("Para realizar o cancelamento da remo√ß√£o do empr√©stimo, digite \"Cancelar\"!")
    print("=============================================")
    
    # N√£o coloquei os ifs para conferir se o usuario esta na list_users, pois se o usu√°rio ja fez o empr√©stimo, √© porque ja est√° cadastrado...
    
    name_user = str(input("Nome do usu√°rio: ")) .strip()
    if name_user not in list_users:
        print("üî¥ O usu√°rio n√£o foi encontrado!")
        return
    
    if name_user.lower() == "cancelar":
        return
    
    book = str(input("T√≠tulo do livro: ")).strip()
    
    if book.lower() == "cancelar":
        return
    
    if book not in books_library["borrowed"]:
        print("üî¥ O livro n√£o foi emprestado para ningu√©m!")
        return
    
    book_infos = books_library["borrowed"][book]
    book_author = book_infos["author"]
    book_year = book_infos["year"]
    
    del books_library["borrowed"][book]
    books_library["available"][book] = {"author": book_author, "year": book_year}
    
    save_data(books_library, list_users)
    print("=============================================")
    print(f"O usu√°rio {name_user} n√£o est√° mais com o livro {book}!")    
    print("‚úÖ Empr√©stimo removido com sucesso!")
    print("=============================================")
    
    
# Formatar o cpf para ficar top
def format_cpf(cpf_str):
    return f"{cpf_str[:3]}.{cpf_str[3:6]}.{cpf_str[6:9]}-{cpf_str[9:]}"

# Mesmo que a pessoa digite as pontua√ßoes do cpf, o input n√£o vai dar erro por isso!
def clean_cpf(cpf):
    return ''.join(filter(str.isdigit, cpf))